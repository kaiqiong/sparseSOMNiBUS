// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// fitProxGradCpp
List fitProxGradCpp(NumericVector& theta, double& intStepSize, const double& lambda1, const DataFrame& dat, const arma::mat& basisMat0, const int& nk, const arma::mat& Hp, const double& maxInt, const double& epsilon, const double& shrinkScale, const bool& accelrt, const int& numCovs, const List& designMat1, const bool& truncation);
RcppExport SEXP _sparseSOMNiBUS_fitProxGradCpp(SEXP thetaSEXP, SEXP intStepSizeSEXP, SEXP lambda1SEXP, SEXP datSEXP, SEXP basisMat0SEXP, SEXP nkSEXP, SEXP HpSEXP, SEXP maxIntSEXP, SEXP epsilonSEXP, SEXP shrinkScaleSEXP, SEXP accelrtSEXP, SEXP numCovsSEXP, SEXP designMat1SEXP, SEXP truncationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double& >::type intStepSize(intStepSizeSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda1(lambda1SEXP);
    Rcpp::traits::input_parameter< const DataFrame& >::type dat(datSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type basisMat0(basisMat0SEXP);
    Rcpp::traits::input_parameter< const int& >::type nk(nkSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Hp(HpSEXP);
    Rcpp::traits::input_parameter< const double& >::type maxInt(maxIntSEXP);
    Rcpp::traits::input_parameter< const double& >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< const double& >::type shrinkScale(shrinkScaleSEXP);
    Rcpp::traits::input_parameter< const bool& >::type accelrt(accelrtSEXP);
    Rcpp::traits::input_parameter< const int& >::type numCovs(numCovsSEXP);
    Rcpp::traits::input_parameter< const List& >::type designMat1(designMat1SEXP);
    Rcpp::traits::input_parameter< const bool& >::type truncation(truncationSEXP);
    rcpp_result_gen = Rcpp::wrap(fitProxGradCpp(theta, intStepSize, lambda1, dat, basisMat0, nk, Hp, maxInt, epsilon, shrinkScale, accelrt, numCovs, designMat1, truncation));
    return rcpp_result_gen;
END_RCPP
}
// fitProxGradCppold
List fitProxGradCppold(NumericVector& theta, double& intStepSize, const double& lambda1, const DataFrame& dat, const arma::mat& basisMat0, const int& nk, const arma::mat& sparOmega, const double& lambda2, const arma::mat& smoOmega1, const double& maxInt, const double& epsilon, const double& shrinkScale, const bool& accelrt, const int& numCovs, const List& designMat1, const arma::mat& basisMat1, const bool& truncation);
RcppExport SEXP _sparseSOMNiBUS_fitProxGradCppold(SEXP thetaSEXP, SEXP intStepSizeSEXP, SEXP lambda1SEXP, SEXP datSEXP, SEXP basisMat0SEXP, SEXP nkSEXP, SEXP sparOmegaSEXP, SEXP lambda2SEXP, SEXP smoOmega1SEXP, SEXP maxIntSEXP, SEXP epsilonSEXP, SEXP shrinkScaleSEXP, SEXP accelrtSEXP, SEXP numCovsSEXP, SEXP designMat1SEXP, SEXP basisMat1SEXP, SEXP truncationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double& >::type intStepSize(intStepSizeSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda1(lambda1SEXP);
    Rcpp::traits::input_parameter< const DataFrame& >::type dat(datSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type basisMat0(basisMat0SEXP);
    Rcpp::traits::input_parameter< const int& >::type nk(nkSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sparOmega(sparOmegaSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda2(lambda2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type smoOmega1(smoOmega1SEXP);
    Rcpp::traits::input_parameter< const double& >::type maxInt(maxIntSEXP);
    Rcpp::traits::input_parameter< const double& >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< const double& >::type shrinkScale(shrinkScaleSEXP);
    Rcpp::traits::input_parameter< const bool& >::type accelrt(accelrtSEXP);
    Rcpp::traits::input_parameter< const int& >::type numCovs(numCovsSEXP);
    Rcpp::traits::input_parameter< const List& >::type designMat1(designMat1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type basisMat1(basisMat1SEXP);
    Rcpp::traits::input_parameter< const bool& >::type truncation(truncationSEXP);
    rcpp_result_gen = Rcpp::wrap(fitProxGradCppold(theta, intStepSize, lambda1, dat, basisMat0, nk, sparOmega, lambda2, smoOmega1, maxInt, epsilon, shrinkScale, accelrt, numCovs, designMat1, basisMat1, truncation));
    return rcpp_result_gen;
END_RCPP
}
// sparseOmegaCr
arma::mat sparseOmegaCr(const arma::vec myh, const int K, const arma::mat matF);
RcppExport SEXP _sparseSOMNiBUS_sparseOmegaCr(SEXP myhSEXP, SEXP KSEXP, SEXP matFSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type myh(myhSEXP);
    Rcpp::traits::input_parameter< const int >::type K(KSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type matF(matFSEXP);
    rcpp_result_gen = Rcpp::wrap(sparseOmegaCr(myh, K, matF));
    return rcpp_result_gen;
END_RCPP
}
// fitProxGradCppSeq
List fitProxGradCppSeq(const NumericVector& ulam, NumericVector& theta, double& intStepSize, const DataFrame& dat, const arma::mat& basisMat0, const int& nk, const arma::mat& Hp, const double& maxInt, const double& epsilon, const double& shrinkScale, const bool& accelrt, const int& numCovs, const List& designMat1, const bool& truncation, const double& neg2loglikSat);
RcppExport SEXP _sparseSOMNiBUS_fitProxGradCppSeq(SEXP ulamSEXP, SEXP thetaSEXP, SEXP intStepSizeSEXP, SEXP datSEXP, SEXP basisMat0SEXP, SEXP nkSEXP, SEXP HpSEXP, SEXP maxIntSEXP, SEXP epsilonSEXP, SEXP shrinkScaleSEXP, SEXP accelrtSEXP, SEXP numCovsSEXP, SEXP designMat1SEXP, SEXP truncationSEXP, SEXP neg2loglikSatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type ulam(ulamSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double& >::type intStepSize(intStepSizeSEXP);
    Rcpp::traits::input_parameter< const DataFrame& >::type dat(datSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type basisMat0(basisMat0SEXP);
    Rcpp::traits::input_parameter< const int& >::type nk(nkSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Hp(HpSEXP);
    Rcpp::traits::input_parameter< const double& >::type maxInt(maxIntSEXP);
    Rcpp::traits::input_parameter< const double& >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< const double& >::type shrinkScale(shrinkScaleSEXP);
    Rcpp::traits::input_parameter< const bool& >::type accelrt(accelrtSEXP);
    Rcpp::traits::input_parameter< const int& >::type numCovs(numCovsSEXP);
    Rcpp::traits::input_parameter< const List& >::type designMat1(designMat1SEXP);
    Rcpp::traits::input_parameter< const bool& >::type truncation(truncationSEXP);
    Rcpp::traits::input_parameter< const double& >::type neg2loglikSat(neg2loglikSatSEXP);
    rcpp_result_gen = Rcpp::wrap(fitProxGradCppSeq(ulam, theta, intStepSize, dat, basisMat0, nk, Hp, maxInt, epsilon, shrinkScale, accelrt, numCovs, designMat1, truncation, neg2loglikSat));
    return rcpp_result_gen;
END_RCPP
}
// proximalOperatorCpp
NumericVector proximalOperatorCpp(const double& t, const double& lambda1, const arma::colvec& u_p, const int& nk);
RcppExport SEXP _sparseSOMNiBUS_proximalOperatorCpp(SEXP tSEXP, SEXP lambda1SEXP, SEXP u_pSEXP, SEXP nkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type t(tSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda1(lambda1SEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type u_p(u_pSEXP);
    Rcpp::traits::input_parameter< const int& >::type nk(nkSEXP);
    rcpp_result_gen = Rcpp::wrap(proximalOperatorCpp(t, lambda1, u_p, nk));
    return rcpp_result_gen;
END_RCPP
}
// dot_std
double dot_std(NumericVector& x, NumericVector& y);
RcppExport SEXP _sparseSOMNiBUS_dot_std(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(dot_std(x, y));
    return rcpp_result_gen;
END_RCPP
}
// dot_arma
double dot_arma(arma::vec& x, arma::vec& y);
RcppExport SEXP _sparseSOMNiBUS_dot_arma(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(dot_arma(x, y));
    return rcpp_result_gen;
END_RCPP
}
// proximalOperatorCppOld
NumericVector proximalOperatorCppOld(const double& t, const double& lambda1, const arma::mat& Hp, const arma::colvec& u_p, const int& nk);
RcppExport SEXP _sparseSOMNiBUS_proximalOperatorCppOld(SEXP tSEXP, SEXP lambda1SEXP, SEXP HpSEXP, SEXP u_pSEXP, SEXP nkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type t(tSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda1(lambda1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Hp(HpSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type u_p(u_pSEXP);
    Rcpp::traits::input_parameter< const int& >::type nk(nkSEXP);
    rcpp_result_gen = Rcpp::wrap(proximalOperatorCppOld(t, lambda1, Hp, u_p, nk));
    return rcpp_result_gen;
END_RCPP
}
// thetaUpdateCpp
List thetaUpdateCpp(const double& stepSize, const NumericVector& theta, const NumericVector& gBinomLoss, const int& nk, const int& numCovs, const double& lambda1, const arma::mat& Hp, const arma::mat& basisMat0, const DataFrame& dat, const List& designMat1, const NumericVector& theta_m, const int& iter, const bool& accelrt, const bool& truncation);
RcppExport SEXP _sparseSOMNiBUS_thetaUpdateCpp(SEXP stepSizeSEXP, SEXP thetaSEXP, SEXP gBinomLossSEXP, SEXP nkSEXP, SEXP numCovsSEXP, SEXP lambda1SEXP, SEXP HpSEXP, SEXP basisMat0SEXP, SEXP datSEXP, SEXP designMat1SEXP, SEXP theta_mSEXP, SEXP iterSEXP, SEXP accelrtSEXP, SEXP truncationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type stepSize(stepSizeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gBinomLoss(gBinomLossSEXP);
    Rcpp::traits::input_parameter< const int& >::type nk(nkSEXP);
    Rcpp::traits::input_parameter< const int& >::type numCovs(numCovsSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda1(lambda1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Hp(HpSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type basisMat0(basisMat0SEXP);
    Rcpp::traits::input_parameter< const DataFrame& >::type dat(datSEXP);
    Rcpp::traits::input_parameter< const List& >::type designMat1(designMat1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type theta_m(theta_mSEXP);
    Rcpp::traits::input_parameter< const int& >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< const bool& >::type accelrt(accelrtSEXP);
    Rcpp::traits::input_parameter< const bool& >::type truncation(truncationSEXP);
    rcpp_result_gen = Rcpp::wrap(thetaUpdateCpp(stepSize, theta, gBinomLoss, nk, numCovs, lambda1, Hp, basisMat0, dat, designMat1, theta_m, iter, accelrt, truncation));
    return rcpp_result_gen;
END_RCPP
}
// oneUpdateCpp
List oneUpdateCpp(const NumericVector& theta, double stepSize, const double& lambda1, const DataFrame& dat, const arma::mat& basisMat0, const int& nk, const arma::mat& Hp, const int& numCovs, const double& shrinkScale, const List& designMat1, const NumericVector& theta_m, const int& iter, const bool& accelrt, const bool& truncation);
RcppExport SEXP _sparseSOMNiBUS_oneUpdateCpp(SEXP thetaSEXP, SEXP stepSizeSEXP, SEXP lambda1SEXP, SEXP datSEXP, SEXP basisMat0SEXP, SEXP nkSEXP, SEXP HpSEXP, SEXP numCovsSEXP, SEXP shrinkScaleSEXP, SEXP designMat1SEXP, SEXP theta_mSEXP, SEXP iterSEXP, SEXP accelrtSEXP, SEXP truncationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type stepSize(stepSizeSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda1(lambda1SEXP);
    Rcpp::traits::input_parameter< const DataFrame& >::type dat(datSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type basisMat0(basisMat0SEXP);
    Rcpp::traits::input_parameter< const int& >::type nk(nkSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Hp(HpSEXP);
    Rcpp::traits::input_parameter< const int& >::type numCovs(numCovsSEXP);
    Rcpp::traits::input_parameter< const double& >::type shrinkScale(shrinkScaleSEXP);
    Rcpp::traits::input_parameter< const List& >::type designMat1(designMat1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type theta_m(theta_mSEXP);
    Rcpp::traits::input_parameter< const int& >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< const bool& >::type accelrt(accelrtSEXP);
    Rcpp::traits::input_parameter< const bool& >::type truncation(truncationSEXP);
    rcpp_result_gen = Rcpp::wrap(oneUpdateCpp(theta, stepSize, lambda1, dat, basisMat0, nk, Hp, numCovs, shrinkScale, designMat1, theta_m, iter, accelrt, truncation));
    return rcpp_result_gen;
END_RCPP
}
// getSeparateThetaCpp
List getSeparateThetaCpp(const NumericVector& theta, const int& nk, const int& numCovs);
RcppExport SEXP _sparseSOMNiBUS_getSeparateThetaCpp(SEXP thetaSEXP, SEXP nkSEXP, SEXP numCovsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const int& >::type nk(nkSEXP);
    Rcpp::traits::input_parameter< const int& >::type numCovs(numCovsSEXP);
    rcpp_result_gen = Rcpp::wrap(getSeparateThetaCpp(theta, nk, numCovs));
    return rcpp_result_gen;
END_RCPP
}
// estimatePijCpp
List estimatePijCpp(const NumericVector& theta, const arma::mat& basisMat0, const List& designMat1, const int& nk, const int& numCovs);
RcppExport SEXP _sparseSOMNiBUS_estimatePijCpp(SEXP thetaSEXP, SEXP basisMat0SEXP, SEXP designMat1SEXP, SEXP nkSEXP, SEXP numCovsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type basisMat0(basisMat0SEXP);
    Rcpp::traits::input_parameter< const List& >::type designMat1(designMat1SEXP);
    Rcpp::traits::input_parameter< const int& >::type nk(nkSEXP);
    Rcpp::traits::input_parameter< const int& >::type numCovs(numCovsSEXP);
    rcpp_result_gen = Rcpp::wrap(estimatePijCpp(theta, basisMat0, designMat1, nk, numCovs));
    return rcpp_result_gen;
END_RCPP
}
// getPrec
double getPrec(double x);
RcppExport SEXP _sparseSOMNiBUS_getPrec(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(getPrec(x));
    return rcpp_result_gen;
END_RCPP
}
// binomObjectCppValueCopy
List binomObjectCppValueCopy(const NumericVector theta, arma::mat basisMat0, const DataFrame dat, const int nk, const int numCovs, List designMat1, const bool truncation);
RcppExport SEXP _sparseSOMNiBUS_binomObjectCppValueCopy(SEXP thetaSEXP, SEXP basisMat0SEXP, SEXP datSEXP, SEXP nkSEXP, SEXP numCovsSEXP, SEXP designMat1SEXP, SEXP truncationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type basisMat0(basisMat0SEXP);
    Rcpp::traits::input_parameter< const DataFrame >::type dat(datSEXP);
    Rcpp::traits::input_parameter< const int >::type nk(nkSEXP);
    Rcpp::traits::input_parameter< const int >::type numCovs(numCovsSEXP);
    Rcpp::traits::input_parameter< List >::type designMat1(designMat1SEXP);
    Rcpp::traits::input_parameter< const bool >::type truncation(truncationSEXP);
    rcpp_result_gen = Rcpp::wrap(binomObjectCppValueCopy(theta, basisMat0, dat, nk, numCovs, designMat1, truncation));
    return rcpp_result_gen;
END_RCPP
}
// binomObjectCpp
List binomObjectCpp(const NumericVector& theta, const arma::mat& basisMat0, const DataFrame& dat, const int& nk, const int& numCovs, const List& designMat1, const bool& truncation);
RcppExport SEXP _sparseSOMNiBUS_binomObjectCpp(SEXP thetaSEXP, SEXP basisMat0SEXP, SEXP datSEXP, SEXP nkSEXP, SEXP numCovsSEXP, SEXP designMat1SEXP, SEXP truncationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type basisMat0(basisMat0SEXP);
    Rcpp::traits::input_parameter< const DataFrame& >::type dat(datSEXP);
    Rcpp::traits::input_parameter< const int& >::type nk(nkSEXP);
    Rcpp::traits::input_parameter< const int& >::type numCovs(numCovsSEXP);
    Rcpp::traits::input_parameter< const List& >::type designMat1(designMat1SEXP);
    Rcpp::traits::input_parameter< const bool& >::type truncation(truncationSEXP);
    rcpp_result_gen = Rcpp::wrap(binomObjectCpp(theta, basisMat0, dat, nk, numCovs, designMat1, truncation));
    return rcpp_result_gen;
END_RCPP
}
// binomObjectCppRef
List binomObjectCppRef(const NumericVector& theta, const arma::mat& basisMat0, const DataFrame& dat, const int& nk, const int& numCovs, const List& designMat1, const bool& truncation);
RcppExport SEXP _sparseSOMNiBUS_binomObjectCppRef(SEXP thetaSEXP, SEXP basisMat0SEXP, SEXP datSEXP, SEXP nkSEXP, SEXP numCovsSEXP, SEXP designMat1SEXP, SEXP truncationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type basisMat0(basisMat0SEXP);
    Rcpp::traits::input_parameter< const DataFrame& >::type dat(datSEXP);
    Rcpp::traits::input_parameter< const int& >::type nk(nkSEXP);
    Rcpp::traits::input_parameter< const int& >::type numCovs(numCovsSEXP);
    Rcpp::traits::input_parameter< const List& >::type designMat1(designMat1SEXP);
    Rcpp::traits::input_parameter< const bool& >::type truncation(truncationSEXP);
    rcpp_result_gen = Rcpp::wrap(binomObjectCppRef(theta, basisMat0, dat, nk, numCovs, designMat1, truncation));
    return rcpp_result_gen;
END_RCPP
}
// twoPenaltiesCpp
double twoPenaltiesCpp(List thetaSep, double lambda1, int numCovs, int nk);
RcppExport SEXP _sparseSOMNiBUS_twoPenaltiesCpp(SEXP thetaSepSEXP, SEXP lambda1SEXP, SEXP numCovsSEXP, SEXP nkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type thetaSep(thetaSepSEXP);
    Rcpp::traits::input_parameter< double >::type lambda1(lambda1SEXP);
    Rcpp::traits::input_parameter< int >::type numCovs(numCovsSEXP);
    Rcpp::traits::input_parameter< int >::type nk(nkSEXP);
    rcpp_result_gen = Rcpp::wrap(twoPenaltiesCpp(thetaSep, lambda1, numCovs, nk));
    return rcpp_result_gen;
END_RCPP
}
// lambdaMaxCpp
double lambdaMaxCpp(arma::vec& meth, arma::vec& total, const List& designMat1, const arma::mat& Hp, int& numCovs, arma::vec& mu);
RcppExport SEXP _sparseSOMNiBUS_lambdaMaxCpp(SEXP methSEXP, SEXP totalSEXP, SEXP designMat1SEXP, SEXP HpSEXP, SEXP numCovsSEXP, SEXP muSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type meth(methSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type total(totalSEXP);
    Rcpp::traits::input_parameter< const List& >::type designMat1(designMat1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Hp(HpSEXP);
    Rcpp::traits::input_parameter< int& >::type numCovs(numCovsSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    rcpp_result_gen = Rcpp::wrap(lambdaMaxCpp(meth, total, designMat1, Hp, numCovs, mu));
    return rcpp_result_gen;
END_RCPP
}
// designToTilda
List designToTilda(const List& designMat1, const arma::mat& Linv, const int& numCovs);
RcppExport SEXP _sparseSOMNiBUS_designToTilda(SEXP designMat1SEXP, SEXP LinvSEXP, SEXP numCovsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type designMat1(designMat1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Linv(LinvSEXP);
    Rcpp::traits::input_parameter< const int& >::type numCovs(numCovsSEXP);
    rcpp_result_gen = Rcpp::wrap(designToTilda(designMat1, Linv, numCovs));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_sparseSOMNiBUS_fitProxGradCpp", (DL_FUNC) &_sparseSOMNiBUS_fitProxGradCpp, 14},
    {"_sparseSOMNiBUS_fitProxGradCppold", (DL_FUNC) &_sparseSOMNiBUS_fitProxGradCppold, 17},
    {"_sparseSOMNiBUS_sparseOmegaCr", (DL_FUNC) &_sparseSOMNiBUS_sparseOmegaCr, 3},
    {"_sparseSOMNiBUS_fitProxGradCppSeq", (DL_FUNC) &_sparseSOMNiBUS_fitProxGradCppSeq, 15},
    {"_sparseSOMNiBUS_proximalOperatorCpp", (DL_FUNC) &_sparseSOMNiBUS_proximalOperatorCpp, 4},
    {"_sparseSOMNiBUS_dot_std", (DL_FUNC) &_sparseSOMNiBUS_dot_std, 2},
    {"_sparseSOMNiBUS_dot_arma", (DL_FUNC) &_sparseSOMNiBUS_dot_arma, 2},
    {"_sparseSOMNiBUS_proximalOperatorCppOld", (DL_FUNC) &_sparseSOMNiBUS_proximalOperatorCppOld, 5},
    {"_sparseSOMNiBUS_thetaUpdateCpp", (DL_FUNC) &_sparseSOMNiBUS_thetaUpdateCpp, 14},
    {"_sparseSOMNiBUS_oneUpdateCpp", (DL_FUNC) &_sparseSOMNiBUS_oneUpdateCpp, 14},
    {"_sparseSOMNiBUS_getSeparateThetaCpp", (DL_FUNC) &_sparseSOMNiBUS_getSeparateThetaCpp, 3},
    {"_sparseSOMNiBUS_estimatePijCpp", (DL_FUNC) &_sparseSOMNiBUS_estimatePijCpp, 5},
    {"_sparseSOMNiBUS_getPrec", (DL_FUNC) &_sparseSOMNiBUS_getPrec, 1},
    {"_sparseSOMNiBUS_binomObjectCppValueCopy", (DL_FUNC) &_sparseSOMNiBUS_binomObjectCppValueCopy, 7},
    {"_sparseSOMNiBUS_binomObjectCpp", (DL_FUNC) &_sparseSOMNiBUS_binomObjectCpp, 7},
    {"_sparseSOMNiBUS_binomObjectCppRef", (DL_FUNC) &_sparseSOMNiBUS_binomObjectCppRef, 7},
    {"_sparseSOMNiBUS_twoPenaltiesCpp", (DL_FUNC) &_sparseSOMNiBUS_twoPenaltiesCpp, 4},
    {"_sparseSOMNiBUS_lambdaMaxCpp", (DL_FUNC) &_sparseSOMNiBUS_lambdaMaxCpp, 6},
    {"_sparseSOMNiBUS_designToTilda", (DL_FUNC) &_sparseSOMNiBUS_designToTilda, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_sparseSOMNiBUS(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
